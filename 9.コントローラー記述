controllers/
├── admin/
|   ├── sessions_controller.rb [new, create, destroy]
|   ├── homes_controller.rb [top]
|   ├── items_controller.rb [index, new, create, show, edit, update]
|   ├── customers_controller.rb [index, show, edit, update]
|   ├── genres_controller.rb [index, create, edit, update]
|   ├── orders_controller.rb [show, update]
│   └── order_items_controller.rb [update]
├── concerns/
│   └── ...
├── application_controller.rb
└── public/
    ├── homes_controller.rb [top, about]
    ├── items_controller.rb [index, show]
    ├── registrations_controller.rb [new, create]
    ├── sessions_controller.rb [new, create, destroy]
    ├── customers_controller.rb [show, edit, update, quit, deactive]
    ├── deliveries_controller.rb [index, create, edit, update, destroy]
    ├── cart_items_controller.rb [index, update, destroy,destroy_all, create]
    └── orders_controller.rb [new, confirm, complete, create, index, show]

0) ===========================================================================
class ApplicationController < ActionController::Base
  before_action :configure_authentication	#---現在のコントローラーが管理者用かどうかに基づいて適切な認証メソッド（authenticate_user! または authenticate_admin!）を呼び出
 
  private
 
  def configure_authentication
    if admin_controller?	#---Admin名前空間の下にあるかどうかを判定
      authenticate_admin!
    else
      authenticate_user! unless action_is_public?	#---コントローラーがhomesかつtopアクションではない場合にfalseが返りauthenticate_user!が実行
    end
  end
 
  def admin_controller?
    self.class.module_parent_name == 'Admin'
  end
 
  def action_is_public?		#---特定のアクションが認証が不要かどうかを判定
    controller_name == 'homes' && action_name == 'top'
  end
end

1) ===========================================================================
class Admin::HomesController < ApplicationController
  before_action :authenticate_admin!



end

2) ===========================================================================
class Public::RegistrationsController < Devise::RegistrationsController
  before_action :configure_sign_up_params, only: [:create]


  def configure_sign_up_params
    devise_parameter_sanitizer.permit(:sign_up, keys:[:name])
  end



end

3) ===========================================================================
class Public::SessionsController < Devise::SessionsController
  before_action :customer_state, only: [:create]

 
  def after_sign_in_path_for(resource)
    root_path
  end

  private

　def customer_state
  　if customer = Customer.find_by(email: params[:customer][:email])
    　if customer.valid_password?(params[:customer][:password]) && customer.active_for_authentication? == false
      　flash[:error] = '退会済みです'
      　redirect_to new_customer_session_path
    　else
      　flash[:error] = 'パスワードが間違っているか、または未入力です'
    　end
  　else
    　flash[:error] = '必須項目を入力してください'
  　end
　end

 
end


1) ===========================================================================
class CustomersController < ApplicationController
  before_action :authenticate_customer!

  def show    #--- GET /customers/:id
    @customer = current_customer
  end

  def edit    #--- GET /customers/:id/edit
    @customer = current_customer
  end

  def update    #--- PATCH/PUT /customers/:id
    @customer = current_customer
    if @customer.update(customer_params)
      redirect_to @customer, notice: 'Customer was successfully updated.'
    else
      render :show
    end
  end

  def info    #--- GET /customers/:id/info
    @customer = current_customer
  end

  def quit    #--- GET /customers/:id/quit
    @customer = current_customer
  end

def deactive	#--- PATCH /customers/:id/deactive
  customer = current_customer
  if confirm('退会しますか？')
    customer.update(is_active: false)
    reset_session
    flash.clear
    redirect_to root_path, notice: '退会しました'
  else
    redirect_back
  end
end

  private

  def customer_params
      params.require(:customer).permit(:last_name, :first_name, :last_name_kana, :first_name_kana, :postal_code, :address, :telphone_number, :email)
  end
end

2) ===========================================================================
class CartItemsController < ApplicationController
	before_action :authenticate_customer!
	before_action :setup_cart_item!, only: [:update, :create, :destroy, :destroy_all]

  def index    #--- GET /cart_items
    @cart_items = current_customer.cart_items
  end

  def create    #--- POST /cart_items
    cart_item = current_customer.cart_items.find_by(item_id: params[:cart_item][:item_id])
    if cart_item.present?
 			cart_item.update(quantity: cart_item.quantity + params[:cart_item][:quantity].to_i)
			flash[:notice] = "数量変更しました"     
    else
			cart_item=CartItem.new(cart_item_params)
			cart_item.save
			flash[:notice] = "商品をカートにいれました"
    end
      redirect_to cart_items_path
  end

  def destroy    #--- DELETE /cart_items/:id
    cart_item = CartItem.find(params[:id])
    cart_item.destroy
		flash[:notice] = "カートから１商品を削除しました"
    redirect_to cart_items_path, notice: 'Item removed from cart.'
  end

  def update    #--- PATCH/PUT /cart_items/:id
    cart_item = CartItem.find(params[:id])
    if cart_item.update(cart_item_params)
      redirect_to cart_items_path, notice: 'Item updated in cart.'
    else
      render :index
    end
  end

  def destroy_all    #--- DELETE /cart_items/cart_items
    CartItem.destroy_all
    redirect_to cart_items_path, notice: 'All items removed from cart.'
  end

  private

  def cart_item_params
    params.require(:cart_item).permit(:customer_id, :item_id, :quantity)
  end
end

3) ===========================================================================
class OrdersController < ApplicationController
	before_action :authenticate_customer!
  def new
    @order = Order.new
    @deliveries = current_customer.deliveries
  end

  def confirm
    @cart_items = current_customer.cart_items
    @order = Order.new(customer: current_customer, payment_method: params[:order][:payment_method])
    @order.total_price = billing(@order)

    if params[:order][:address_option] == "address"
      @order.postal_code = current_customer.postal_code
      @order.address     = current_customer.address
      @order.name        = current_customer.last_name + current_customer.first_name

    elsif params[:order][:address_option] == "shipping_address"
      ship = Address.find(params[:order][:address_id])
      @order.postal_code = ship.postal_code
      @order.address     = ship.address
      @order.name        = ship.name

    elsif params[:order][:address_option] == "new_address"
      @order.postal_code = params[:order][:postal_code]
      @order.address     = params[:order][:address]
      @order.name        = params[:order][:name]
      @ship = "1"

      unless @order.valid? == true
        @addresses = Address.where(customer: current_customer)
        render :new
      end
    end
  end

  def create
    @order = Order.new(order_params)
    @order.save
    current_customer.cart_items.each do |cart_item|
	@order_item = OrderItem.new
	@order_item.order_id = @order.id
	@order_item.item_id = cart_item.item_id
	@order_item.tax_price = cart_item.tax_price
	@order_item.quantity = cart_item.quantity
	@order_item.save!
    end
    current_customer.cart_items.destroy_all
    redirect_to orders_complete_path
  end

  def complete
    @order = Order.find(params[:id])
    @order.complete!
    redirect_to orders_path, notice: '注文を完了しました'
  end

  def index
    @orders = current_customer.orders
  end

  def show
    @order = Order.find(params[:id])
    @order_items = @order.order_items
  end

  private

  def order_params
    params.require(:order).permit(:customer_id, :item_id, :quantity, :grand_total, :attention, :postal_code, :address)
  end
end



