================================================================================================================================
create_table :admin do |t|
  t.string :login_id, null: false, default: ""
  t.string :email, null: false, default: ""
  t.string :encrypted_password, null: false, default: ""
end

create_table :user do |t|
  t.string :username, null: false
  t.string :nickname, null: false
  t.text :introduction
  t.boolean :is_active, null: false, default: true
end

validates :username uniqueness: true
validates :email, uniqueness: true

has_one_attached :profile_image
has_many :locations, dependent: :destroy
#---follow
has_many :relationships, dependent: :destroy
has_many :followings, through: :relationships, source: :followed
has_many :followers, through: :reverse_of_relationships, source: :follower
#---application
has_many :applicants, through: :applications, source: :applicant
#---notification
has_many :notifications, dependent: :destroy
has_many :visitors, class_name: "Notifications", foreign_key: :visitor_id
has_many :visiteds, class_name: "Notifications", foreign_key: :visited_id
#---users_affaires
has_many :offers
has_many :applications
has_many :deals
has_many :favorites, dependent: :destroy
has_many :comments
has_many :chattings

#---followship
def follow(user_id)
  relationships.create(followed_id: user_id)
end

def unfollow(user_id)
  relationships.find_by(followed_id: user_id).destroy
end

def following?(user)
  followings.include?(user)
end

#---make_notification
def create_notification_follow!(current_user)
    temp = Notification.where(["visitor_id = ? and visited_id = ? and action = ? ", current_user.id, id, 'follow'])
    if temp.blank?
      notification = current_user.active_notifications.new(
        visited_id: id,
        action: 'follow'
      )
      notification.save if notification.valid?
    end
end

#---daily_count_for_new_users
scope :newuser_today, -> { where(created_at: Time.current.at_beginning_of_day..Time.current.at_end_of_day) }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :location do |t|
  t.integer :user_id, null: false
  t.string :address, null: false
  t.float :latitude, null: false
  t.float :longitude, null: false
end

belongs_to :user

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :relationship do |t|
  t.references :follower, null: false, foreign_key: { to_table: :users }
  t.references :followed, null: false, foreign_key: { to_table: :users }
end

belongs_to :follower, class_name: "User"
belongs_to :followed, class_name: "User"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :offer do |t|
  t.references :user, null: false, foreign_key: true
  t.string :title, null: false
  t.text :description, null: false
  t.datetime :work_date, null: false
  t.string :location, null: false
  t.integer :person, null: false
  t.string :requirement, null: false
  t.string :reward, null: false
  t.integer :offer_status, null: false
  t.boolean :is_deleted, null: false, default: false
end

has_one_attached :offer_image
belongs_to :user
has_many :users, through: :favorites
has_many :favorites, dependent: :destroy
has_many :comments, dependent: :destroy
has_many :applications
has_many :applicants, through: :applications, dependent: :destroy
has_many :notifications
scope :offered_today, -> { where(created_at: Time.current.at_beginning_of_day..Time.current.at_end_of_day) }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :favorite do |t|
  t.references :user, null: false, foreign_key: true
  t.references :offer, null: false, foreign_key: true
end

belongs_to :user
belongs_to :offer
has_many :notifications

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :comment do |t|
  t.references :user, null: false, foreign_key: true
  t.references :offer, null: false, foreign_key: true
  t.text :comment, null: false
end

belongs_to :user
belongs_to :offer
has_many :notifications

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :application do |t|
  t.references :user, null: false, foreign_key: true
  t.references :offer, null: false, foreign_key: true
  t.references :applicant, null: false, foreign_key: { to_table: :users }
  t.text :appeal, null: false
  t.integer :application_status, null: false
  t.boolean :is_deleted, null: false, default: false
end

belongs_to :user
belongs_to :offer
belongs_to :applicant, class_name: "User"
has_many :notifications

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :deal do |t|
  t.references :offer, null: false, foreign_key: true
  t.references :user, null: false, foreign_key: true
  t.references :application, null: false, foreign_key: true
  t.references :applicant, null: false, foreign_key: { to_table: :users }
  t.datetime :work_date, null: false
  t.integer :deal_status, null: false
end

belongs_to :offer
belongs_to :application
belongs_to :user
belongs_to :applicant, class_name: "User"
has_many :chattings, dependent: :destroy
has_many :reviews, dependent: :destroy
has_many :notifications


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :chatting do |t|
  t.references :deal, null: false, foreign_key: true
  t.references :user, null: false, foreign_key: true
  t.text :chat, null: false
end

belongs_to :deal
belongs_to :user
has_many :notifications

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :review do |t|
  t.references :deal, null: false, foreign_key: true
  t.references :user, null: false, foreign_key: true
  t.references :applicant, null: false, foreign_key: { to_table: :users }
  t.text :review, null: false
  t.float :all_rating, null: false, default: 0
  t.float :rating1, null: false, default: 0
  t.float :rating2, null: false, default: 0
  t.float :rating3, null: false, default: 0
  t.float :rating4, null: false, default: 0
end

belongs_to :deal
belongs_to :offerer, class_name: "User"
belongs_to :acceptor, class_name: "User"
has_many :notifications
scope :reviewed_today, -> { where(created_at: Time.current.at_beginning_of_day..Time.current.at_end_of_day) }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create_table :notification do |t|
  t.integer :visitor_id, null: false, foreign_key: true
  t.integer :visited_id, null: false, foreign_key: true
  t.integer :action_type, null: false
  t.boolean :checked, null: false, default: false
end

belongs_to :visitor, class_name: "User", foreign_key: :visitor_id, optional: true
belongs_to :visited, class_name: "User", foreign_key: :visited_id, optional: true
belongs_to :offer, optional: true
belongs_to :favorite, optional: true
belongs_to :comment, optional: true
belongs_to :application, optional: true
belongs_to :deal, optional: true
belongs_to :chatting, optional: true
belongs_to :review, optional: true

================================================================================================================================
