240218-00


gem 'googlemaps'

<%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_KEY']}" %>



<%= google_map(latitude: 35.652832, longitude: 139.839478) %>


<%= google_map(latitude: 35.652832, longitude: 139.839478) do |map| %>
  <%= map.marker(latitude: 35.652832, longitude: 139.839478) %>
<% end %>


gem 'geocoder'


<%= google_map(address: "東京都渋谷区") do |map| %>
  <%= map.marker(latitude: map.geocode("東京都渋谷区").latitude, longitude: map.geocode("東京都渋谷区").longitude) %>
<% end %>



# アドレスモデル
class Address < ApplicationRecord
  # 住所
  attribute :address
  # 緯度
  attribute :latitude
  # 経度
  attribute :longitude
end

# コントローラー
class AddressesController < ApplicationController
  # 住所一覧
  def index
    @addresses = Address.all
  end

  # 地図表示
  def show
    @address = Address.find(params[:id])

    # 地図の初期化
    @map = Gmaps4rails.build_markers(@address) do |marker, address|
      marker.lat address.latitude
      marker.lng address.longitude
      marker.infowindow address.address
    end
  end
end

# ビュー
# 住所一覧
index.html.erb




<%= link_to "地図表示", address_path(address) %>


<%= gmaps4rails(@map) %>

ユーザーはindex.html.erbで住所一覧を表示します。
ユーザーは地図表示したい住所のリンクをクリックします。
AddressesController#showアクションが実行されます。
Addressモデルから選択された住所を取得します。
Gmaps4railsを使用して、地図とマーカーを生成します。
show.html.erbで地図を表示します。



240217-00


dealsをグループに見立てて作成し、選抜した応募者をグループ化して成立させる。

class Deal < ApplicationRecord
  has_many :group_users
  has_many :users, through: :group_users
end

class User < ApplicationRecord
  has_many :group_users
  has_many :deals, through: :group_users
end

class GroupUser < ApplicationRecord
  belongs_to :deal
  belongs_to :user
end



class DealsController < ApplicationController
  before_action :authenticate_user!

  def index
    @groups = Deal.all
  end

  def new
    @group = Deal.new
  end

  def create
    @group = Deal.new(deal_params)
    if @group.save
      redirect_to deals_path, notice: "仕事グループを作成しました"
    else
      render :new
    end
  end

  private

  def deal_params
    params.require(:deal).permit(:name, :description, :public)
  end
end

class GroupUsersController < ApplicationController
  before_action :authenticate_user!

  def create
    @group = Deal.find(params[:deal_id])
    @group_user = GroupUser.new(user_id: current_user.id, group_id: @group.id)
    if @group_user.save
      redirect_to deal_path(@deal), notice: "仕事グループに加入しました"
    else
      redirect_to groups_path, alert: "仕事グループに加入できませんでした"
    end
  end

  def destroy
    @group = Deal.find(params[:deal_id])
    @group_user = GroupUser.find_by(user



Rails.application.routes.draw do
  resources :deals do
    resources :users, only: [:index, :create, :destroy]
  end
end


class Group < ApplicationRecord
  has_many :group_users
  has_many :users, through: :group_users
end

class User < ApplicationRecord
  has_many :group_users
  has_many :groups, through: :group_users
end

class Candidate < ApplicationRecord
  # 候補者の属性
end


class GroupsController < ApplicationController
  before_action :authenticate_user!

  def new
    @group = Group.new
    @candidates = Candidate.all
  end

  def create
    @group = Group.new(group_params)
    @candidates = Candidate.all

    if @group.save
      # 選択された候補者を取得
      selected_candidates = params[:candidates]

      # グループに候補者を追加
      selected_candidates.each do |candidate_id|
        @group.users << User.find(candidate_id)
      end

      redirect_to groups_path, notice: "グループを作成しました。"
    else
      render :new
    end
  end

  private

  def group_params
    params.require(:group).permit(:name, :description, :public)
  end
end


<%= form_for @group do |f| %>
  <div class="form-group">
    <%= f.label :name %>
    <%= f.text_field :name, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= f.label :description %>
    <%= f.text_area :description, class: "form-control" %>
  </div>

  <div class="form-group">
    <%= f.label :public %>
    <%= f.check_box :public %>
  </div>

  <h3>候補者リスト</h3>
  <ul>
    <% @candidates.each do |candidate| %>
      <li>
        <%= f.check_box :candidates, candidate.id %>
        <%= candidate.name %>
      </li>
    <% end %>
  </ul>

  <%= f.submit "グループを作成", class: "btn btn-primary" %>
<% end %>





240215-01

gem 'CanCanCan'


class Ability
  include CanCanCan::Ability

  def initialize(user)
    # 依頼ユーザーは、自分が依頼した応募と取引を編集できる
    can :edit, Application, offer: { user_id: user.id }
    can :edit, Deal, application: { request: { user_id: user.id } }
  end
end



240215-00
要件定義

1.依頼者は仕事依頼画面で依頼タイトル、依頼内容、実施日時、実施場所、募集人数、応募条件、謝礼を設定し、投稿する。
2.応募検討者が依頼者へコメントするため、依頼詳細画面にコメント機能を導入する。
3.応募者は仕事依頼一覧画面で気になる仕事を見つけ、「応募する」ボタンをクリックして応募する。
4.依頼者は応募者一覧画面で応募者を確認し、募集人数内で応募者を選ぶ。
5.依頼者は「選定」ボタンをクリックし、選定された応募者は取引画面へ進む。
6.選定されなかった応募者は仕事依頼一覧へリダイレクトされる。
7.選定結果は応募詳細画面の応募ステータスで確認ができる。
8.取引詳細画面では、チャット機能を使い、依頼者と応募者が連絡を取り合うことができる。
9.依頼した仕事が完了した後は、依頼者が取引詳細画面の「依頼完了」ボタンを押し、レビュー画面へ進む。
10.レビュー画面では星評価機能とコメント投稿機能を実装し、依頼者のみ投稿できるようにする。




240208_20:00-

1) geocorder
Google Map APIを実装した場合、初期状態は経緯を指定する必要があるが、gem 'geocorder'を導入することで、
住所を入力することで経緯に自動変換し、MapにPinを刺すことができるようになる。


2) simple-calendar
https://zenn.dev/cyaroya/articles/cc3238bb69a969
https://qiita.com/yamaday0u/items/5fa2ab42bdc685711709

https://qiita.com/00000000/items/b03c373226217daf7e77



====================================================================================================================
240126-00

1.コントローラー見直し
2.エラー表示設定
3.検索機能手直し
4.Viewの手直し
5.Seeds作成
6.テスト

====================================================================================================================



1.ルーティングの見直し
collection => member => 削除
genreの索引ができてない
=>解決

2.resistrationsの不要記述を削除
before 以下の削除
customer登録ができてない



3.Gemifileに追加
ransack
検索機能が有効になってない
=>search_wordブロック内は不要
set_searchブロック記述

def set_search
    @q = Item.ransack(params[:q])
    @items = @q.result(distinct: true)
end

===
<%= search_form_for @q do |f| %>
    <%= f.label :name_cont %>
    <%= f.search_field :name_cont %>

    <%= f.submit %>
<% end %>


<%= render 'search_word', q: @q, url: search_path %>

===
app/models/item.rb

def self.ransackable_attributes(auth_object = nil)
        %w[name introduction]
    end

    def self.ransackable_associations(auth_object = nil)
        []
    end


===

eq. 完全に一致したものを抽出します。

lt. ある値より小さいものを抽出します。

gt. ある値より大きなものを抽出します。

in. 与えられた配列に含まれるものを抽出します。

cont,not_cont. 文字列が含まれるものを抽出します。not_をつけることで、文字列が含まれないものを抽出に切り替える事ができます。

start,end  startは与えられた文字列が先頭と一致するものを抽出します。いわゆる前方一致検索です。 endは逆に後方一致検索を行います。
