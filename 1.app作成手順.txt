1)appの作成
2)appをアクセス可能にする
3)modelの確立
4)deviseの導入
5)controllerの設定
6)routeの設定
7)bootstrapの導入
8)Active Strageの導入
9)viewの組立、Pagenationの導入
10)GEMIFILE

==============================
1) appの作成
rails new ***  /// rm -rf ***

2) appをアクセス可能にする
Plug-in
username:~/environment/*** $ yarn add @babel/plugin-proposal-private-methods @babel/plugin-proposal-private-property-in-object

***/config/environment/development.rb
+++
>>> config.hosts.clear

3)modelの確立
Create 'model' => cf) List, Book, User
rails g model ***
// app/model/***.rb
---rails destroy model ***
>>>rails db:rollback

〇バリデーション設定
app/models/***.rb
+++
  validates :title, presence: true
  validates :body, presence: true

<<<<
モデル名	単数形、先頭は英大文字	List
モデルのファイル名	単数形、先頭は英小文字	list.rb
テーブル名	複数形、先頭は英小文字	list
<<<<
string : 文字列/255文字
text : 長い文字列/4294967296文字
integer : 整数/4 bites
float : 浮動小数/小数点以下が浮動
decimal : 精度の高い小数/有効数字
datetime : 日時/date+time
timestamp : タイムスタンプ
time : 時間/時刻
date : 日付/年月日
binary : バイナリデータ
boolean : 真偽性/true/false
<<<<
PK(主キー)	---テーブルのレコードを一意に特定するカラム
または、テーブルを作成した時に必ず生成されるid
FK(外部キー)	---指定したカラムの自由な記述を許可せず、
指定したカラムの値しか使えないように制約が付いている項目
データ型	---データ型を設定することで
指定した条件以外のデータを入れることができなくなる
NOT NULL	---空のカラムを禁止する制約
AUTO INCREMENT	---設定したカラムに自動的に番号を割り当てる機能
INDEX	----索引の意味を持ち、データベースの表の検索処理を高速化させるもの
DEFAULT	----データの初期値を設定する機能
<<<<
テーブル名
---テーブル名全体が小文字の英語である
---複数形である
---スネークケースである
カラム名
---カラム名が小文字の英語である
---スネークケースである
---テーブル名をカラム名の頭につけない　※カラム名の先頭には原則、テーブル名に相当する語句は不要
---ローマ字ではなく英単語を用いる
---略語、略名を使わない
---boolean型のカラムはis_〇〇という形で定義する
---外部キーは(テーブル名単数形)_idの形になっている
---名前を見ただけで中に入るデータを正確に読み取れる
---deviseはパスワードを文字列のままではなく、ハッシュ化という元の値がわからないように処理を施した形で保存

ad/migrate/YYYYNNDDHHMM_create_***.rb (Table Info)
+++
      t.string :title
      t.string :body

      t.string :name, null: false
      t.text :introduction, null: false
      t.integer :price, null: false
      t.integer :genre_id, null: false
      t.boolean :is_active, null: false   #---変数のデータ型の一種であり、真理値のtrue(真)とfalse(偽)の２つの値をとるデータ型
>>> rails db:migrate
>>> schema.rbで確認

〇カラムの追加、名称変更、削除
<追加>
>>>rails g migration Addカラム名Toテーブル名 カラム名:型名
cf. rails g migration AddNameToLists name:string >>>rails db:migrate

<名称変更>
>>>rails g migration rename_[変更前のカラム名]_column_to_[モデル名(複数形)]
cf. rails g migration RenameNameColumnToLists
+++ 
  def change
    rename_column :テーブル名, :変更前のカラム名, :変更後のカラム名
  end
>>>rails db:migrate

<削除>
>>>rails g migration Removeカラム名Fromテーブル名 カラム名※型名は指定しなくても可
cf. rails g migration RemoveNameFromLists name >>>rails db:migrate

>>> schema.rbで確認
cf. create_table "lists", force: :cascade do |t| 内に、追加の場合は「 t.string "name"」が追加され、名称変更の場合は「"author_name"」（例）に変更、削除の場合は削除される

<その他>
<<<rails db:rollback
一番最後にmigrateしたマイグレーションファイルをupからdownの状態にします。
>>>rails db:migrate:status
マイグレーションファイルのステータスを確認

<<<rm db/migrate/yyyymmddhhmmss_****.rb
マイグレーションファイルを削除

rails db:reset:
データベースを完全にドロップし（削除し）、その後で最初から再作成します。これはdb:dropとdb:setupを連続で行うことに相当します。
つまり、すべてのデータが消去され、データベースが新しい状態にリセットされ、初期データ（seeds.rbに定義されたもの）がロードされます。
このコマンドは特に開発初期段階や、データベース構造に重大な変更があった場合に役立ちます。

rails db:migrate:reset:
データベースのマイグレーションをリセットします。具体的には、すべてのマイグレーションをロールバック（取り消し）し、その後すべてのマイグレーションを最初から適用し直します。
つまり、db:migrate:down（すべてのマイグレーションをバージョン0にロールバック）とdb:migrate（すべてのマイグレーションを最新のものに適用）を行います。
このコマンドは、マイグレーションファイルを修正した後や、マイグレーションの順序を確認する必要がある場合に便利です。

4)deviseの導入
a-1)<Gemifile>devise
+++ gem 'devise'
>>>*** $ bundle install
>>>*** $ rails g devise:install

<汎用設定>
a-2)User
>>>*** $ rails g devise User

a-3) db/migrate/（年月日時分秒）_devise_create_users.rb
+++ t.string :name
>>> rails db:migrate

5)controllerの設定
<汎用設定>
>>>rails g controller *** top index show edit ... etc
new, index, create, show, edit, update, destroy

<controllerの削除>
>>> rails destroy controller ***
// controllers/concerns/***_controller.rb

<管理者としてのユーザーを作成し、管理者としてログイン、ログアウトできる仕様>
>>>rails g devise Admin    #---Adminモデルを作成
>>>rails g devise:controllers admin

+++config/routes.rb    #---ルーティング編集
  devise_for :admins =>
  devise_for :admin, skip: [:registrations, :password], controllers: {
    sessions: 'admin/sessions'
  }

>>>rails g devise:views admins    #---viewを作成
<<<フォルダ名変更 admins => admin
+++app/views/admin/sessions/new.html.erb
<%= render "admins/shared/links" %> => <%= render "admin/shared/links" %>
+++app/views/admin/sessions/new.html.erb
<%= form_with model: @admin, url: session_path(resource_name), local: true do |f| %>
#---form_for => form_with

>>>管理者側にログイン(サインイン)機能のみを実装する場合は、それ以外の記述は削除
----app/views/admin/shared/_links.html.erb
<%- if controller_name != 'sessions' %>
  <%= link_to "Log in", new_session_path(resource_name) %>
<% end %>
#---以下削除

>>>rails db:migrate
>>>Admin.create!(email: 'admin@example.com', password: 'password', password_confirmation: 'password')

+++admin/sessions_controller.rb
  protected

  def after_sign_in_path_for(resource)
    admin_dashboards_path  #----ログイン後にリダイレクトするパス
  end

   def after_sign_out_path_for(resource_or_scope)
    new_admin_session_path  #----ログアウト後にリダイレクトするパス
  end

<管理者用のダッシュボード機能の作成>
>>>rails g controller admin/dashboards
+++dashboards_controller.rb
    before_action :authenticate_admin!
    def index
        @users = User.all
    end
#----dashboards_controller.rbにユーザーの一覧表示の機能を作成

+++config/routes.rb    #管理者ダッシュボードへのルーティングを追加
  devise_for :admin, skip: [:registrations, :password], controllers: {
    sessions: 'admin/sessions'
  }
 
  namespace :admin do
    get 'dashboards', to: 'dashboards#index'
  end

>>>touch app/views/admin/dashboards/index.html.erb
<h1>全ユーザー一覧</h1>
<ul>
  <% @users.each do |user| %>
    <li>
      <%= user.name %> - <%= user.email %>
    </li>
  <% end %>
</ul>

+++app/views/layouts/admin.html.erb
<!DOCTYPE html>
<html>
<head>
  <title>Admin - Meshiterro</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
  <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
</head>
<body>
  <% if admin_signed_in? %>
    <div class="text-right">
      <%= link_to 'ログアウト', destroy_admin_session_path, method: :delete %>
    </div>
  <% end %>
  <%= yield %>
</body>
</html>

+++dashboards_controller.rb
    layout 'admin' #----追加
    before_action :authenticate_admin!
    def index
        @users = User.all
    end
+++admin/sessions_controller.rb
class Admin::SessionsController < Devise::SessionsController
  layout 'admin' #----追加


<publicフォルダを作成し、複数のファイルを作成>#会員用
>>> mkdir app/controllers/public
>>>mv app/controllers/{favorites,homes,post_comments,post_images,users}_controller.rb app/controllers/public/

+++config/routes.rb  #---ルーティング編集
  scope module: :public do
    devise_for :users
    root to: 'homes#top'
    get 'homes/about', to: 'homes#about', as: :about
    resources :post_images, only: [:new, :create, :index, :show, :destroy] do
      resource :favorites, only: [:create, :destroy]
      resources :post_comments, only: [:create, :destroy]
    end
    resources :users, only: [:show, :edit, :update]
  end

+++class Public::各Controller < ApplicationController
cf. class Public::UsersController < ApplicationController

<<<app/viewsにpublicフォルダを作成し、app/views/deviseの中身をapp/views/publicの内に移動
<<<また、app/viewsの配下のadmin、layouts、kaminariのフォルダ以外もapp/views/publicの内に移動
#---viewsの再利用

<ユーザー削除機能の追加>
>>>rails g controller admin/users
+++admin/users_controller.rb
    before_action :authenticate_admin!
    def destroy
        @user = User.find(params[:id])
        @user.destroy
        redirect_to admin_dashboards_path, notice: 'ユーザーを削除しました。'
    end
+++config/routes.rb
namespace :admin do
  get 'dashboards', to: 'dashboards#index'
  resources :users, only: [:destroy] #----追加
end
+++app/views/admin/dashboards/index.html.erb
<h1>全ユーザー一覧</h1>
<ul>
  <% @users.each do |user| %>
    <li>
      <%= user.name %> - <%= user.email %>
      <!-- リンクを追加 -->
      <%= link_to '削除', admin_user_path(user), method: :delete, data: { confirm: '本当に削除しますか？' } %> 
    </li>
  <% end %>
</ul>

<権限の設定>
+++application_controller.rb
  before_action :authenticate_user!, except: [:top], unless: :admin_controller? #----追加
  before_action :configure_permitted_parameters, if: :devise_controller?

  private
 
  def admin_controller?
    self.class.module_parent_name == 'Admin'
  end



>>>
<namespace の使い方>
username:~/environment/naganocake $ rails g controller admin/items
#---controllerやviewなどのコードのファイルを作成する時に、adminというフォルダ内に自動的に保存するコマンドになっています。
>>>username:~/environment/*** $ rails g controller [namespaceのグループ名]/[コントローラー名]

6) routeの設定
Routing
+++ resources :***
>>>$ rails routes

***/config/routess.rb

device_for :users
root to: 'home#top'

GET：データの取得
POST：データの作成
PUT：データの置換
PATCH：データの更新
DELETE：データの削除

パターン①
resources :users, only: [:show, :edit, :index, :update]
resources :books, only: [:show, :edit, :index, :update, :new, :create, :destroy]

パターン②
  resources :post_images, only: [:new, :create, :index, :show, :destroy] do
    resource :favorite, only: [:create, :destroy]
    resources :post_comments, only: [:create, :destroy]
  end
  resources :users, only: [:show, :edit, :update]


7)Bootstrapの導入
>>>$ yarn add jquery bootstrap@4.6.2 popper.js

8)Active Strageの導入

b-1)<Active Storage>  environment/*** $
rails active_storage:install
rails db:migrate

b-2)<Gemfile>Active Strage
# gem 'image_processing', '~>1.2'
↓
gem 'image_processing', '~>1.2'
>>>*** $ bundle install

b-3)config/environments/development.rb
+++ config.active_job.queue_adapter = :inline
>>>$ bundle install

b-4)***/app/asses/images/
イメージファイルを保存


9)viewの組立、Pagenationの導入

〇Pagenation
>>>"Gemifile" +++ gem 'kaminari','~> 1.2.1'
>>>$ bundle install
>>>rails g kaminari:config
>>>rails g kaminari:views default
>>> " def index" ***.all => ***.page(params[:page])
>>>+++.page(params[:page])
>>><%= paginate post_images %>
>>>"config/initializers/kaminari_config.rb"+++ config.default_per_page = 5

10)GEMIFILE



===========================トラブルシューティング
〇Webpackerが起動しない？
・appの外部アクセスが要因
・Webpackerの再インストール
>>>
x-1)ターミナルで、Railsアプリケーションのルートディレクトリに移動します。
x-2)bundle exec rails webpacker:installコマンドを実行します。

y-1)すべての環境でWebpackerを再インストールすることもできます。
y-2)bundle exec rails webpacker:install:all


〇Font Awesome

<script src="https://kit.fontawesome.com/56a079a110.js" crossorigin="anonymous"></script>

  <head>
    <title>BookersVer2</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
　　<%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <script src="https://kit.fontawesome.com/56a079a110.js" crossorigin="anonymous"></script>
    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>
