1)appの作成
2)appをアクセス可能にする
3)modelの確立
4)deviseの導入
5)controllerの設定
6)routeの設定
7)bootstrapの導入
8)Active Strageの導入
9)viewの組立、Pagenationの導入
10)GEMIFILE

==============================
1) appの作成
rails new ***  /// rm -rf ***

2) appをアクセス可能にする
Plug-in
username:~/environment/*** $ yarn add @babel/plugin-proposal-private-methods @babel/plugin-proposal-private-property-in-object

***/config/environment/development.rb
+++
>>> config.hosts.clear

3)modelの確立
Create 'model' => cf) List, Book, User
rails g model ***
// app/model/***.rb
---rails destroy model ***
>>>rails db:rollback

<<<<
モデル名	単数形、先頭は英大文字	List
モデルのファイル名	単数形、先頭は英小文字	list.rb
テーブル名	複数形、先頭は英小文字	list
<<<<
string : 文字列/255文字
text : 長い文字列/4294967296文字
integer : 整数/4 bites
float : 浮動小数/小数点以下が浮動
decimal : 精度の高い小数/有効数字
datetime : 日時/date+time
timestamp : タイムスタンプ
time : 時間/時刻
date : 日付/年月日
binary : バイナリデータ
boolean : 真偽性/true/false
<<<<
PK(主キー)	---テーブルのレコードを一意に特定するカラム
または、テーブルを作成した時に必ず生成されるid
FK(外部キー)	---指定したカラムの自由な記述を許可せず、
指定したカラムの値しか使えないように制約が付いている項目
データ型	---データ型を設定することで
指定した条件以外のデータを入れることができなくなる
NOT NULL	---空のカラムを禁止する制約
AUTO INCREMENT	---設定したカラムに自動的に番号を割り当てる機能
INDEX	----索引の意味を持ち、データベースの表の検索処理を高速化させるもの
DEFAULT	----データの初期値を設定する機能
<<<<
テーブル名
---テーブル名全体が小文字の英語である
---複数形である
---スネークケースである
カラム名
---カラム名が小文字の英語である
---スネークケースである
---テーブル名をカラム名の頭につけない　※カラム名の先頭には原則、テーブル名に相当する語句は不要
---ローマ字ではなく英単語を用いる
---略語、略名を使わない
---boolean型のカラムはis_〇〇という形で定義する
---外部キーは(テーブル名単数形)_idの形になっている
---名前を見ただけで中に入るデータを正確に読み取れる
---deviseはパスワードを文字列のままではなく、ハッシュ化という元の値がわからないように処理を施した形で保存

+++ad/migrate/YYYYNNDDHHMM_create_***.rb (Table Info)
      t.string :title
      t.string :body

      t.string :name, null: false
      t.text :introduction, null: false
      t.integer :price, null: false
      t.integer :genre_id, null: false
      t.boolean :is_active, null: false   #---変数のデータ型の一種であり、真理値のtrue(真)とfalse(偽)の２つの値をとるデータ型
>>> rails db:migrate
>>> schema.rbで確認

〇カラムの追加、名称変更、削除
<追加>
>>>rails g migration Addカラム名Toテーブル名 カラム名:型名
cf. rails g migration AddNameToLists name:string >>>rails db:migrate

<名称変更>
>>>rails g migration rename_[変更前のカラム名]_column_to_[モデル名(複数形)]
cf. rails g migration RenameNameColumnToLists
+++ 
  def change
    rename_column :テーブル名, :変更前のカラム名, :変更後のカラム名
  end
>>>rails db:migrate

<削除>
>>>rails g migration Removeカラム名Fromテーブル名 カラム名※型名は指定しなくても可
cf. rails g migration RemoveNameFromLists name >>>rails db:migrate

>>> schema.rbで確認
cf. create_table "lists", force: :cascade do |t| 内に、追加の場合は「 t.string "name"」が追加され、名称変更の場合は「"author_name"」（例）に変更、削除の場合は削除される

<その他>
<<<rails db:rollback
一番最後にmigrateしたマイグレーションファイルをupからdownの状態にします。
>>>rails db:migrate:status
マイグレーションファイルのステータスを確認

<<<rm db/migrate/yyyymmddhhmmss_****.rb
マイグレーションファイルを削除

rails db:reset:
データベースを完全にドロップし（削除し）、その後で最初から再作成します。これはdb:dropとdb:setupを連続で行うことに相当します。
つまり、すべてのデータが消去され、データベースが新しい状態にリセットされ、初期データ（seeds.rbに定義されたもの）がロードされます。
このコマンドは特に開発初期段階や、データベース構造に重大な変更があった場合に役立ちます。

rails db:migrate:reset:
データベースのマイグレーションをリセットします。具体的には、すべてのマイグレーションをロールバック（取り消し）し、その後すべてのマイグレーションを最初から適用し直します。
つまり、db:migrate:down（すべてのマイグレーションをバージョン0にロールバック）とdb:migrate（すべてのマイグレーションを最新のものに適用）を行います。
このコマンドは、マイグレーションファイルを修正した後や、マイグレーションの順序を確認する必要がある場合に便利です。

〇バリデーション設定
+++app/models/***.rb
  validates :title, presence: true
  validates :body, presence: true

cf:class Address < ApplicationRecord
  belongs_to :customer

  validates :attention, presence: true, length: { minimum: 2, maximum: 20 }
  validates :postal_code, presence: true, length: { is: 7 }, numericality: { only_integer: true }
  validates :address, presence: true, length: { minimum: 7, maximum: 150 }

cf:class Order < ApplicationRecord
  belongs_to :customer
  has_many :order_details, dependent: :destroy

  enum payment_method: {"クレジットカード": 0, "銀行振込": 1}
  enum order_status: {"入金待ち": 0, "入金確認": 1, "製作中": 2, "発送準備中": 3, "発送済み": 4}
  validates :name, presence: true, length: { minimum: 2, maximum: 20 }
  validates :postal_code, presence: true, length: { is: 7 }, numericality: { only_integer: true }
  validates :address, presence: true, length: { minimum: 7, maximum: 150 }

4)deviseの導入
a-1)<Gemifile>devise
+++ gem 'devise'
>>>*** $ bundle install
>>>*** $ rails g devise:install

<汎用設定>
a-2)User
>>>*** $ rails g devise User

a-3) db/migrate/（年月日時分秒）_devise_create_users.rb
+++ t.string :name
>>> rails db:migrate

5)controllerの設定
<汎用設定>
>>>rails g controller *** top index show edit ... etc
new, index, create, show, edit, update, destroy

<controllerの削除>
>>> rails destroy controller ***
// controllers/concerns/***_controller.rb


6) routeの設定
Routing
+++ resources :***
>>>$ rails routes

***/config/routess.rb

device_for :users
root to: 'home#top'

GET：データの取得
POST：データの作成
PUT：データの置換
PATCH：データの更新
DELETE：データの削除

パターン①
resources :users, only: [:show, :edit, :index, :update]
resources :books, only: [:show, :edit, :index, :update, :new, :create, :destroy]

パターン②
  resources :post_images, only: [:new, :create, :index, :show, :destroy] do
    resource :favorite, only: [:create, :destroy]
    resources :post_comments, only: [:create, :destroy]
  end
  resources :users, only: [:show, :edit, :update]

7)Bootstrapの導入
>>>$ yarn add jquery bootstrap@4.6.2 popper.js

8)Active Strageの導入

b-1)<Active Storage>  environment/*** $
rails active_storage:install
rails db:migrate

b-2)<Gemfile>Active Strage
# gem 'image_processing', '~>1.2'
↓
gem 'image_processing', '~>1.2'
>>>*** $ bundle install

b-3)config/environments/development.rb
+++ config.active_job.queue_adapter = :inline
>>>$ bundle install

b-4)***/app/asses/images/
イメージファイルを保存


9)viewの組立、Pagenationの導入

〇Pagenation
>>>"Gemifile" +++ gem 'kaminari','~> 1.2.1'
>>>$ bundle install
>>>rails g kaminari:config
>>>rails g kaminari:views default
>>>"config/initializers/kaminari_config.rb"+++ config.default_per_page = 5      #---5ページ毎

>>> " def index" ***.all => ***.page(params[:page])
>>>+++.page(params[:page])
>>><%= paginate post_images %>


10)GEMIFILE



===========================トラブルシューティング
〇Webpackerが起動しない？
・appの外部アクセスが要因
・Webpackerの再インストール
>>>
x-1)ターミナルで、Railsアプリケーションのルートディレクトリに移動します。
x-2)bundle exec rails webpacker:installコマンドを実行します。

y-1)すべての環境でWebpackerを再インストールすることもできます。
y-2)bundle exec rails webpacker:install:all


〇Font Awesome

<script src="https://kit.fontawesome.com/56a079a110.js" crossorigin="anonymous"></script>

  <head>
    <title>BookersVer2</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
　　<%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <script src="https://kit.fontawesome.com/56a079a110.js" crossorigin="anonymous"></script>
    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>
