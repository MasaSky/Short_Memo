1)新規投稿作成
〇ポイント
ControlerのActionに記載が必要

〇表示先コントローラのアクションに記述
@book = Book.new
***
def create
 @book = Book.new(book_params)
パラメーターにBookモデルを新規作成するため

show, indexはモデル作成が必要ないので(book_params)は不要


〇新規投稿コントローラ
***app/controllers/books_controller.rb
  def create
    @user = current_user					#---ユーザー情報指定
    @book = Book.new(book_params)				#---(book_params)モデル指定
    @book.user_id = current_user.id				#---紐づけ用のid
    if @book.save						#---「.save」はアクション
       redirect_to book_path(@book)				#---アクション後の詳細ページへ遷移指定
       flash[:notice] = "You have created book successfully"	#---フラッシュメッセージ
    else
       @books = Book.all					#---再表示先の条件※（@books = Book.all）がないと一覧を再表示できない
       render :index						#---再表示先指定
    end
  end


〇入力フォーム
      <h2 class="mt-3">New book</h2>
      <%= form_with model: @book do |f| %>
        <div class="form-group">
        <%= f.label :title %>
        <%= f.text_field :title, class: "form-control book_title" %>
        </div>
        <div class="form-group">
        <%= f.label :body %>			#---ラベルの表示方法①
        <%= f.text_area :body, class: "form-control book_body" %>
        </div>
        <div class="actions">
        <%= f.submit "Create Book", class:"btn btn-success" %>
        </div>
      <% end %>

2)プロフ更新

    <h2>User info</h2>
    <% if @user.errors.any? %>			#---エラー表示
      <% error_count = @user.errors.count %>
      <h2><%= error_count %> <%= 'error'.pluralize(error_count) %> prohibited this obj from being saved:</h2>
      <ul>
      <% @user.errors.full_messages.each do |message| %>
      <li><%= message %></li>
      <% end %>
      </ul>
    <% end %>
    <%= form_with model: @user do |f| %>	#---フォームを送信
        <div class="form-group">
        <label for="user_name">Name</label>
        <%= f.text_field :name, class: "form-control name", placeholder: "" %>
        </div>
        <div class="form-group">
        <label for="user_image">Image</label>
        <%= f.file_field :profile_image, class: "form-control-file user_image", placeholder: "ファイルを選択", accept: "image/*" %>
        </div>
        <div class="form-group">
        <label for="user_introduction">Introduction</label>		#---ラベルの表示方法②
        <%= f.text_area :introduction, class: "form-control introduction" %>
        </div>
        <div class="form-group">
        <%= f.submit "Update User", class:"btn btn-secondary" %>
        </div>
    <% end %>

***app/controllers/users_controller.rb
  def update
    @user = User.find(params[:id])
    if @user.update(user_params)		#---(params[:id])に情報を格納
      redirect_to user_path(@user.id)
      flash[:notice] = "You have updated user successfully."
    else
      render :edit				#---元の画面にリダイレクト（エラーカウント→表示）
    end
  end

#----placeholder: "ファイルを選択"


3)一覧表示

        <tbody>
        <% if @books.present? %>
          <% @books.each do |book| %>	#---変数指定「@」
            <tr>
            <% if user_signed_in? %>
            <td><%= link_to image_tag(book.user.get_profile_image(100,100)), book.user %></td>	#---個別表示の為、「@」はつけない
            <td><%= link_to book.title, book_path(book.id) %></td>
            <td><%= book.body %></td>
            <% end %>
            </tr>
          <% end %>
        <% end %>
        </tbody>


4)条件表示

        <tbody>
          <tr>
            <td>
            <%= link_to image_tag(@user.get_profile_image(100,100)), user_path(@user.id) %><br>		#---画像にリンク
            <p><%= link_to @user.name, user_path(@user.id) %></p>					
            </td>
            <td><%= link_to @book_id.title, book_path(@book_id.id) %></td>
            <td><%= @book_id.body %></td>
            <% if @user == current_user %>		#---ログイン（ユーザー）指定で表示
            <td><%= link_to "Edit", edit_book_path(@book_id.id), class: 'btn btn-sm btn-success' %></td>	#---link_to "表示", リディレクト先, classs: '表示形式'
            <td><%= link_to "Destroy", book_path(@book_id.id), class: 'btn btn-sm btn-danger', method: :delete, "data-confirm" => "本当に消しますか？" %></td>	#---link_to "表示", リディレクト先, classs: '表示形式', method: メソッド, data-confirm" => "メッセージ？"
            <% else %>
            <% end %>
          </tr>
        </tbody>


5)ログイン認証を設定し、アクセスしようとした場合、別のページに飛ばす。
 before_action :is_matching_login_user, only: [:edit, :update]		#---アクセスを制限するアクションを指定

  def is_matching_login_user
    user = User.find(params[:id])		#---オブジェクト属指定
    unless user.id == current_user.id		#---ユーザー指定
      redirect_to new_user_session_path		#---遷移先指定
    end
  end

before_action :is_matching_login_user, only: [:edit, :update, :destroy]

  def is_matching_login_user
    @book = Book.find(params[:id])
    unless @book.user.id == current_user.id
      redirect_to new_user_session_path
    end
  end


6)フラッシュメッセージの表示

***/app/controllers/***_controller.rb

  def update
    @book = Book.find(params[:id])
    if @book.update(book_params)
      redirect_to book_path(@book.id)
      flash[:notice] = "You have updated book successfully."
    else
      render :edit
    end
  end

***/app/views/layouts/application.html.erb

<main>
  <p><%= flash[:notice] %></p>
    <%= yield %>
</main>


7)エラーメッセージの表示（レンダリング表示）

***/app/views/layouts/_error_messages.html.erb

<% if @book.errors.any? %>
  <% error_count = @book.errors.count %>
  <h2><%= error_count %> <%= 'error'.pluralize(error_count) %> prohibited this obj from being saved:</h2>
  <ul>
    <% @book.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>

***/app/views/books/+++
<%= render "layouts/error_messages", book: @book %>　#---レンダリング表示

#---book: @book: renderメソッドに渡されるローカル変数です。
ここではbookという名前の変数に@bookインスタンス変数の内容を渡しています。
このようにして、パーシャル内でbook変数を使用できるようになります。
※render先



8)プロフィール画像表示
画像にリンク
<%= link_to image_tag(book.user.get_profile_image(100,100)), book.user %>
リンクなし
<%= image_tag @user.get_profile_image(100,100) %>	#--image_tag ユーザー.get_profile_image(100,100)  ※「image_tag」表記が必要

〇使用例
            <%= link_to image_tag(@user.get_profile_image(100,100)), user_path(@user.id) %><br>
            <p><%= link_to @user.name, user_path(@user.id) %></p>
            </td>
            <td><%= link_to @book_id.title, book_path(@book_id.id) %></td>
            <td><%= @book_id.body %></td>


9)アクションに「((@book_params)」が必要か？
〇.update(@book_params)の場合
更新に失敗した場合でも例外が発生しません。そのため、更新に失敗した場合にすぐに処理を進めたい場合に使用します。

〇.saveの場合
新しいレコードを作成するためのアクションです。新しいレコードを作成する場合、バリデーションエラーが発生する可能性は低いため、例外が発生した場合に処理を中断するよりも、そのまま処理を続行した方が効率的です。



10)ボタンにアイコンを付ける

          <%= link_to edit_user_path(@user.id), class: "btn btn-outline-secondary btn-block edit_user_path " do %>
          <i class="fa-solid fa-user-gear"></i>
          <% end %>



11)ハンバーガー表示

      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavDropdown">
        <ul class="navbar-nav ml-auto">
	  <li>*****</li>
	  <li>*****</li>
  	  <li>*****</li>
        </ul>


12)データカルム名を変更（:opinion→:body）　
view, controller, model, db:migrate, db:schema >>>変更


13)投稿削除（ログインユーザー時のみ表示）

***app/controllers/books_controller.rb
  def destroy
    @book = Book.find(params[:id])
    if @book.destroy
    redirect_to '/books'
    end
  end

***表示
            <% if @user == current_user %>		#---ログインユーザー指定
            <td><%= link_to "Edit", edit_book_path(@book_id.id), class: 'btn btn-sm btn-success' %></td>
            <td><%= link_to "Destroy", book_path(@book_id.id), class: 'btn btn-sm btn-danger', method: :delete, "data-confirm" => "本当に消しますか？" %></td>
            <% else %>
		#---無記入で非ログインユーザーには表示されない
            <% end %>
#---method: :delete		メソッドクション）指定
#---"data-confirm" => "本当に消しますか？"　確認メッセージ表示

14)レンダリングのインスタンス変数が複数の場合
<%= render "layouts/error_messages", book: @book, user: @user %>

<!-- layouts/_error_messages.html.erb -->
<div>
  <% if book.errors.any? %>
    <div>
      <!-- エラーメッセージをリスト表示 -->
    </div>
  <% end %>
  <p>Welcome, <%= user.name %>!</p>
</div>

#---@bookインスタンス変数はパーシャル内のbookローカル変数として、@userインスタンス変数はuserローカル変数として利用できるようになります。
パーシャル内では、これらの変数を通常のローカル変数と同様に扱うことができます。


15)コメント投稿機能
***app/controllers/post_comments_controller.rb
  def create
    post_image = PostImage.find(params[:post_image_id])
    comment = current_user.post_comments.new(post_comment_params)
    comment.post_image_id = post_image.id			#---idの照会
    comment.save
    redirect_to post_image_path(post_image)
  end

  def destroy
    PostComment.find(params[:id]).destroy
    redirect_to post_image_path(params[:post_image_id])
  end


  private

  def post_comment_params
    params.require(:post_comment).permit(:comment)
  end

***投稿
  <%= form_with model: [@post_image, @post_comment] do |f| %>
    <%= f.text_area :comment, rows: '5', placeholder: "コメントをここに" %>
    <%= f.submit "送信する" %>
  <% end %>

***表示
  <p>コメント件数：<%= @post_image.post_comments.count %></p>
  <% @post_image.post_comments.each do |post_comment| %>
    <p><%= image_tag post_comment.user.get_profile_image(100,100) %></p>
    <%= post_comment.user.name %>
    <%= post_comment.created_at.strftime('%Y/%m/%d') %><%= post_comment.comment %>
    <% if post_comment.user == current_user %>
      <%= link_to "削除", post_image_post_comment_path(post_comment.post_image, post_comment), method: :delete %>
    <% end %>
  <% end %>

***ルーティング
  resources :post_images, only: [:new, :create, :index, :show, :destroy] do
    resource :favorite, only: [:create, :destroy]
    resources :post_comments, only: [:create, :destroy]



16)「いいね」投稿機能
***app/controllers/favorites_controller.rb
  def create
    post_image = PostImage.find(params[:post_image_id])
    favorite = current_user.favorites.new(post_image_id: post_image.id)
    favorite.save
    redirect_to post_image_path(post_image)
  end

  def destroy
    post_image = PostImage.find(params[:post_image_id])
    favorite = current_user.favorites.find_by(post_image_id: post_image.id)
    favorite.destroy
    redirect_to post_image_path(post_image)
  end

***表示と投稿
  <% if @post_image.favorited_by?(current_user) %>
    <p>
      <%= link_to post_image_favorite_path(@post_image), method: :delete do %>
        ♥<%= @post_image.favorites.count %> いいね
      <% end %>
    </p>
    <% else %>
    <p>
      <%= link_to post_image_favorite_path(@post_image), method: :post do %>
        ♡<%= @post_image.favorites.count %> いいね
      <% end %>
    </p>
  <% end %>
#---ト数字で表示される


