1) Gemのインストール

2) モデルの作成
<deviseの作成> ($ rails g devise Model名)
>>>rails g devise Customer
++++xxxxx_devise_create_customers.rb
      t.string :last_name, null: false
      t.string :fisrt_name, null: false
      t.string :last_name_kana, null: false
      t.string :fisrt_name_kana, null: false
      t.string :postal_code, null: false
      t.string :address, null: false
      t.string :telephone_number, null: false
      t.boolean :is_active, null: false, default: true
      t.timestamps null: false
>>>rails db:migrate

>>>rails g devise Admin
=====コントローラ等ですでに「admin」フォルダが存在し、名前が被っているため作成できない場合
$ rails d devise Admin #　Adminのmigrationファイルを削除
$ rails g model Admin -f # 名前の重複を無視して強制的にAdminモデルを作成
$ rails g devise Admin # 強制的に作成したAdminモデルにdevise用の設定を追加
=====
----カラムは既に記述があるので特段のことがない限り変更不要
>>>rails db:migrate

<モデル/テーブル作成> ($ rails g model Model名)
>>>rails g model Item
++++xxxxx_create_items.rb
      t.integer :genre_id, null: false
      t.string :name, null: false
      t.text :introduction, null: false
      t.integer :unit_price, null: false
      t.boolean :is_active, null: false, default: true
>>>rails db:migrate

>>>rails g model CartItem
++++xxxxx_create_cart_items.rb
      t.integer :item_id, null: false
      t.integer :customer_id, null: false
      t.integer :quantity, null: false
>>>rails db:migrate

>>>rails g model Order
++++xxxxx_create_orders.rb
      t.integer :customer_id, null: false
      t.string :attention, null: false
      t.string :postal_code, null: false
      t.string :address, null: false
      t.integer :freight, null: false
      t.integer :grand_total, null: false
      t.integer :payment_method, null: false
      t.integer :order_status, null: false
>>>rails db:migrate

>>>rails g model OrderItem
++++xxxxx_create_order_items.rb
      t.integer :item_id, null: false
      t.integer :order_id, null: false
      t.integer :price, null: false
      t.integer :quantity, null: false
      t.integer :product_status, null: false
>>>rails db:migrate

>>>rails g model Delivery
++++xxxxx_create_deliveries.rb
      t.integer :customer_id, null: false
      t.string :attention, null: false
      t.string :postal_code, null: false
      t.string :address, null: false
>>>rails db:migrate

>>>rails g model Genre
++++xxxxx_create_genres.rb
      t.string :name, null: false
>>>rails db:migrate

3) バリデーションの設定 (/app/models/***.rb)
+++class Customer < ApplicationRecord
  has_many :cart_items, dependent: :destroy
  has_many :orders, dependent: :destroy
  has_many :deliveries, dependent: :destroy

  validates :last_name, :first_name, :last_name_kana, :first_name_kana, :address, :telphone_number, presence: true
  validates :postal_code, length: { is: 7 }, numericality: { only_integer: true }
  validates :telphone_number, length: { in: 10..11 }, numericality: { only_integer: true }
  validates :last_name_kana, :first_name_kana, format: { with: /\A[\p{katakana}\p{blank}ー－]+\z/, message: "カタカナで入力して下さい。"}

  def active_for_authentication?
    super && (self.is_deleted == false)
  end

  def self.looks(word)
    @customer = Customer.where("last_name LIKE?","%#{word}%")
  end

+++class Item < ApplicationRecord
  belongs_to :genre
	has_one_attached :image
	has_many :cart_items
	has_many :orders, through: :order_details
	has_many :order_items

      validates :genre_id, :name, :unit_price, presence: true
	validates :introduction, length: { maximum: 200 }, presence: true
	validates :unit_price, numericality: { only_integer: true }

	def self.looks(word)
		@item = Item.where("name LIKE?","%#{word}%")
	end

+++class CartItem < ApplicationRecord
  belongs_to :item
  belongs_to :customer

  validates :customer_id, :item_id, :quantity, presence: true
  validates :quantity, numericality: { only_integer: true }

+++class Order < ApplicationRecord
  belongs_to :customer
  has_many :order_items, dependent: :destroy

  enum payment_method: {"クレジットカード": 0, "銀行振込": 1}
  enum order_status: {"入金待ち": 0, "入金確認": 1, "製作中": 2, "発送準備中": 3, "発送済み": 4}
  validates :name, presence: true, length: { minimum: 2, maximum: 20 }
  validates :postal_code, presence: true, length: { is: 7 }, numericality: { only_integer: true }
  validates :address, presence: true, length: { minimum: 7, maximum: 150 }

+++class OrderItem < ApplicationRecord
  belongs_to :order
  belongs_to :item

  enum production_status: {"着手不可": 0, "製作待ち": 1, "製作中": 2, "製作完了": 3}

+++class Delivery < ApplicationRecord
  belongs_to :customer

  validates :attention, presence: true, length: { minimum: 2, maximum: 20 }
  validates :postal_code, presence: true, length: { is: 7 }, numericality: { only_integer: true }
  validates :address, presence: true, length: { minimum: 7, maximum: 150 }

  def order_address
	self.postal_code + self.address + self.name
  end

+++class Genre < ApplicationRecord
  has_many :items, dependent: :destroy
  validates :name, presence: true
